package com.mycompany.clinicmanagement.application.usecases.rh;

public class MedicalRecordUseCase {

}

import com.mycompany.clinicmanagement.domain.models.MedicalRecord;
import com.mycompany.clinicmanagement.domain.models.User;
import com.mycompany.clinicmanagement.domain.ports.MedicalRecordRepositoryPort;
import com.mycompany.clinicmanagement.domain.ports.PatientRepositoryPort;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

/**
 * Caso de uso para manejar la historia cl√≠nica de pacientes.
 * Seg√∫n el documento: solo los m√©dicos pueden crear y actualizar historia cl√≠nica.
 */
public class ManageMedicalRecordUseCase {
    private final MedicalRecordRepositoryPort recordRepository;
    private final PatientRepositoryPort patientRepository; // Para validar que el paciente existe

    public ManageMedicalRecordUseCase(MedicalRecordRepositoryPort recordRepository,
        PatientRepositoryPort patientRepository) {
        this.recordRepository = recordRepository;
        this.patientRepository = patientRepository;
    }

    /**
     * Crea una nueva historia cl√≠nica para un paciente.
     */
    public void createRecord(User doctor, MedicalRecord record) {
        // üìå Validaci√≥n: Solo m√©dicos pueden crear historia cl√≠nica (documento)
        if (doctor == null || !doctor.canCreateMedicalRecords()) {
            throw new SecurityException("Solo un m√©dico puede crear historia cl√≠nica.");
        }

        // üìå Validaci√≥n: Paciente debe existir (buena pr√°ctica)
        if (!patientRepository.existsByDocumentNumber(record.getPatientDocumentNumber())) {
            throw new IllegalArgumentException("El paciente no existe en el sistema.");
        }

        // üìå Validaci√≥n: Fecha no puede ser futura (buena pr√°ctica)
        if (record.getDate().isAfter(LocalDate.now())) {
            throw new IllegalArgumentException("La fecha no puede ser futura.");
        }

        // üìå Validaci√≥n: No permitir duplicados (buena pr√°ctica)
        if (recordRepository.findByPatientAndDate(record.getPatientDocumentNumber(), record.getDate()) != null) {
            throw new IllegalStateException("Ya existe una historia cl√≠nica para ese paciente en esa fecha.");
        }

        // üìå Regla de negocio: ayuda diagn√≥stica no puede coexistir con medicamentos ni procedimientos (documento)
        if (record.getDiagnosticAids() != null && !record.getDiagnosticAids().isEmpty()) {
            if ((record.getMedications() != null && !record.getMedications().isEmpty()) ||
                (record.getProcedures() != null && !record.getProcedures().isEmpty())) {
                throw new IllegalArgumentException("Si se registra una ayuda diagn√≥stica, no se pueden agregar medicamentos ni procedimientos en el mismo registro.");
            }
        }

        // üìå Auditor√≠a (buena pr√°ctica)
        record.setCreatedAt(LocalDateTime.now());
        record.setUpdatedAt(LocalDateTime.now());

        // Guardar registro
        recordRepository.save(record);
    }

    /**
     * Obtiene una historia cl√≠nica por paciente y fecha.
     */
    public MedicalRecord getRecord(String patientDocumentNumber, LocalDate date) {
        return recordRepository.findByPatientAndDate(patientDocumentNumber, date);
    }

    /**
     * Lista todas las historias cl√≠nicas de un paciente.
     */
    public List<MedicalRecord> getRecordsForPatient(String patientDocumentNumber) {
        return recordRepository.findAllByPatient(patientDocumentNumber);
    }

    /**
     * Actualiza una historia cl√≠nica existente.
     * Seg√∫n el documento: los m√©dicos pueden actualizar registros (por ejemplo, agregar resultados).
     */
    public void updateRecord(User doctor, MedicalRecord updatedRecord) {
        // Validaci√≥n de permisos
        if (doctor == null || !doctor.canCreateMedicalRecords()) {
            throw new SecurityException("Solo un m√©dico puede actualizar historia cl√≠nica.");
        }

        MedicalRecord existing = recordRepository.findByPatientAndDate(
                updatedRecord.getPatientDocumentNumber(), updatedRecord.getDate());

        if (existing == null) {
            throw new IllegalArgumentException("No existe una historia cl√≠nica en esa fecha para ese paciente.");
        }

        // üìå Auditor√≠a
        updatedRecord.setCreatedAt(existing.getCreatedAt());
        updatedRecord.setUpdatedAt(LocalDateTime.now());

        recordRepository.save(updatedRecord);
    }

    /**
     * Elimina una historia cl√≠nica (opcional, depende de requerimientos).
     * Normalmente en sistemas reales no se elimina, solo se marca como anulada.
     */
    public void deleteRecord(User doctor, String patientDocumentNumber, LocalDate date) {
        if (doctor == null || !doctor.canCreateMedicalRecords()) {
            throw new SecurityException("Solo un m√©dico puede eliminar historia cl√≠nica.");
        }
        MedicalRecord existing = recordRepository.findByPatientAndDate(patientDocumentNumber, date);
        if (existing == null) {
            throw new IllegalArgumentException("No existe la historia cl√≠nica que se quiere eliminar.");
        }
        recordRepository.delete(patientDocumentNumber, date);
    }
}
